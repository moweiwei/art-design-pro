---
alwaysApply: false
---
# Art Design Pro - Cursor Rules

## 项目概述

Art Design Pro 是一个基于 Vue 3 + TypeScript + Vite 的现代化后台管理系统模板，注重设计美学与高效开发。

## 技术栈

- **前端框架**: Vue 3.5+ (Composition API)
- **开发语言**: TypeScript 5.6+
- **构建工具**: Vite 7.1+
- **UI 框架**: Element Plus 2.11+
- **状态管理**: Pinia 3.0+
- **路由管理**: Vue Router 4.5+
- **HTTP 客户端**: Axios 1.12+
- **样式方案**: SCSS + UnoCSS
- **工具库**: @vueuse/core, lodash-es
- **图表库**: ECharts 5.6+
- **国际化**: Vue I18n 9.14+

## 代码规范

### ESLint 规则

- 使用单引号 (`'`)
- 不使用分号 (`;`)
- 禁用 `var`，使用 `let` 或 `const`
- 禁用 `@typescript-eslint/no-explicit-any`
- 禁用 Vue 组件多词命名检查
- 最多一个空行

### 命名约定

- **组件名称**: PascalCase (例如: `ArtCardBanner`, `ArtFormItem`)
- **文件名称**: kebab-case (例如: `art-card-banner/index.vue`, `use-table.ts`)
- **变量和函数**: camelCase (例如: `userData`, `handleClick`)
- **常量**: UPPER_SNAKE_CASE (例如: `REQUEST_TIMEOUT`, `MAX_RETRIES`)
- **类型/接口**: PascalCase (例如: `UserInfo`, `TableConfig`)
- **枚举**: PascalCase (例如: `LanguageEnum`, `ApiStatus`)

### TypeScript 要求

- 为所有函数参数和返回值添加类型注解
- 使用 `interface` 定义对象类型，使用 `type` 定义联合类型或工具类型
- 优先使用类型推导，避免显式声明可推导的类型
- Props 使用 `defineProps<T>()` 配合 `withDefaults` 定义类型
- 为复杂的组合式函数提供泛型支持

## 项目架构

### 目录结构

```
src/
├── api/              # API 接口定义
├── assets/           # 静态资源 (图片、样式、SVG)
├── components/       # 组件
│   ├── core/        # 核心组件 (banners, cards, charts, forms, layouts, tables)
│   └── custom/      # 自定义组件
├── composables/      # 组合式函数 (useTable, useAuth, useTheme 等)
├── config/           # 配置文件
├── directives/       # 自定义指令
├── enums/           # 枚举定义
├── locales/         # 国际化
├── mock/            # Mock 数据
├── router/          # 路由配置
│   ├── guards/      # 路由守卫
│   ├── routes/      # 路由定义
│   └── utils/       # 路由工具
├── store/           # Pinia 状态管理
│   └── modules/     # Store 模块
├── types/           # TypeScript 类型定义
├── typings/         # 全局类型声明
├── utils/           # 工具函数
│   ├── browser/     # 浏览器相关
│   ├── http/        # HTTP 请求
│   ├── navigation/  # 导航相关
│   ├── storage/     # 存储管理
│   ├── table/       # 表格工具
│   └── theme/       # 主题相关
└── views/           # 页面视图
```

### 路径别名

使用以下路径别名以简化导入：

- `@/*` → `src/*`
- `@views/*` → `src/views/*`
- `@imgs/*` → `src/assets/img/*`
- `@icons/*` → `src/assets/icons/*`
- `@utils/*` → `src/utils/*`
- `@stores/*` → `src/store/*`
- `@styles/*` → `src/assets/styles/*`

## 编码指南

### Vue 组件开发

#### 组件结构

```vue
<template>
  <!-- 模板内容 -->
</template>

<script setup lang="ts">
  // 1. 导入语句
  import { ref, computed } from 'vue'
  
  // 2. 定义组件名
  defineOptions({ name: 'ComponentName' })
  
  // 3. 定义 Props 接口
  interface ComponentProps {
    /** 属性描述 */
    propName: string
  }
  
  // 4. 定义 Props
  const props = withDefaults(defineProps<ComponentProps>(), {
    propName: 'default'
  })
  
  // 5. 定义 Emits
  const emit = defineEmits<{
    (e: 'eventName', value: string): void
  }>()
  
  // 6. 响应式数据
  const data = ref<DataType>()
  
  // 7. 计算属性
  const computed = computed(() => {})
  
  // 8. 方法
  const handleClick = () => {}
  
  // 9. 生命周期
  onMounted(() => {})
</script>

<style lang="scss" scoped>
  /* 样式使用 SCSS，启用 scoped */
</style>
```

#### Vue 最佳实践

- 使用 `<script setup>` 语法
- 使用 Composition API，避免 Options API
- 为所有 Props 添加 JSDoc 注释
- 组件名使用 `defineOptions` 显式定义
- 优先使用 `ref` 而非 `reactive`
- 使用 `computed` 代替复杂的模板表达式
- 事件处理函数以 `handle` 开头
- 双向绑定使用最新的 defineModel 语法

### 组合式函数 (Composables)

- 文件名以 `use` 开头 (例如: `useTable.ts`, `useAuth.ts`)
- 返回对象包含响应式数据和方法
- 添加详细的 JSDoc 注释和类型定义
- 考虑泛型支持以提高复用性

示例：
```typescript
/**
 * 用户认证相关的组合式函数
 */
export function useAuth() {
  const isLogin = ref(false)
  
  const login = async (credentials: LoginParams) => {
    // 实现逻辑
  }
  
  return {
    isLogin: readonly(isLogin),
    login
  }
}
```

### Pinia Store

- Store 使用 Composition API 风格 (`setup` 语法)
- 为每个 Store 添加详细的 JSDoc 注释
- 若需要持久化，使用 `pinia-plugin-persistedstate` 实现持久化
- 计算属性使用 `computed()`
- 导出 Store 时使用 `export const useXxxStore`

示例：
```typescript
/**
 * 用户状态管理
 * 管理用户登录状态、个人信息、语言设置等
 */
export const useUserStore = defineStore(
  'userStore',
  () => {
    const isLogin = ref(false)
    const info = ref<Partial<Api.Auth.UserInfo>>({})
    
    const getUserInfo = computed(() => info.value)
    
    const setUserInfo = (newInfo: Api.Auth.UserInfo) => {
      info.value = newInfo
    }
    
    return {
      isLogin,
      info,
      getUserInfo,
      setUserInfo
    }
  },
  {
    persist: {
      key: 'user',
      storage: localStorage
    }
  }
)
```

### API 定义

- API 函数放在 `src/api` 目录
- 使用封装的 `api` 对象 (get, post, put, del)
- 为每个 API 函数添加类型定义
- 使用 `Api` 命名空间组织类型

示例：
```typescript
import api from '@/utils/http'

/**
 * 获取用户列表
 */
export const getUserList = (params: Api.System.UserListParams) => {
  return api.get<Api.Common.PaginatedResponse<Api.System.UserInfo>>({
    url: '/system/user/list',
    params
  })
}
```

### 工具函数

- 工具函数按功能分类存放在 `src/utils` 子目录
- 每个函数添加 JSDoc 注释
- 导出时使用命名导出
- 复杂工具函数提供使用示例

### 样式编写

#### SCSS 规范

- 使用 BEM 命名规范（可选）
- 使用 CSS 变量实现主题切换
- 避免深层嵌套 (最多 3 层)
- 使用项目提供的 SCSS mixins

#### CSS 变量

项目使用 CSS 变量实现主题系统，主要变量包括：

- `--main-color` - 主题色
- `--art-main-bg-color` - 主背景色
- `--art-text-gray-800` - 深色文本
- `--art-text-gray-600` - 浅色文本
- `--custom-radius` - 圆角大小
- `--el-component-custom-height` - 组件高度

### 国际化

- 使用 `$t` 函数进行翻译
- 翻译键使用点分隔路径 (例如: `'httpMsg.requestFailed'`)

### HTTP 请求

- 使用 `src/utils/http/index.ts` 导出的 `api` 对象
- 默认不显示错误消息，需要时设置 `showErrorMessage: true`
- 成功消息使用 `showSuccessMessage: true`
- 处理 401 使用统一的拦截器

示例：
```typescript
try {
  const data = await api.post<ResponseType>({
    url: '/api/endpoint',
    data: params,
    showSuccessMessage: true
  })
} catch (error) {
  // 错误已在拦截器中处理
}
```

## 特色功能使用

### useTable 组合式函数

项目内置强大的 `useTable` Hook，提供完整的表格解决方案：

```typescript
const {
  data,              // 表格数据
  loading,           // 加载状态
  pagination,        // 分页信息
  searchParams,      // 搜索参数
  getData,           // 获取数据 (跳转第一页)
  fetchData,         // 获取数据 (保持当前页)
  resetSearchParams, // 重置搜索
  refreshCreate,     // 新增后刷新
  refreshUpdate,     // 更新后刷新
  refreshRemove,     // 删除后刷新
  handleSizeChange,  // 分页大小变化
  handleCurrentChange // 页码变化
} = useTable({
  core: {
    apiFn: getUserList,
    apiParams: { status: 1 },
    immediate: true,
    columnsFactory: () => [...columns]
  },
  performance: {
    enableCache: true,
    cacheTime: 5 * 60 * 1000
  },
  hooks: {
    onSuccess: (data) => console.log('成功', data)
  }
})
```

### 路由管理

- 静态路由定义在 `router/routes/staticRoutes.ts`
- 动态路由定义在 `router/routes/asyncRoutes.ts`
- 路由别名使用 `RoutesAlias` 枚举
- 路由守卫分为 `beforeEach` 和 `afterEach`

### 主题切换

- 使用 CSS 变量实现
- 主题配置在 `useSettingStore`
- 暗黑模式样式在 `@styles/dark.scss`

### 权限控制

- 使用自定义指令 `v-auth` 和 `v-roles`
- 路由级权限在路由 meta 中配置
- 按钮级权限使用指令控制

## 性能优化

- 使用动态导入分割路由代码
- 图片使用 WebP 格式
- 使用 Vite 的依赖预构建
- 启用 gzip 压缩
- 大列表使用虚拟滚动

## 测试与调试

- 使用 Vue DevTools 调试
- HTTP 请求日志在开发环境自动输出
- useTable 支持 debug 模式查看缓存状态

## 提交规范

使用 Commitizen 规范提交：

```bash
pnpm commit
```

提交类型：
- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 重构
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建/工具链相关

## 开发流程

1. 从 `main` 分支创建功能分支
2. 遵循代码规范开发
3. 运行 `pnpm lint` 检查代码
4. 使用 `pnpm commit` 提交代码
5. 提交 Pull Request

## 注意事项

- **自动导入**: Vue API (ref, computed 等) 和 Element Plus 组件已自动导入，无需手动 import
- **环境变量**: 使用 `import.meta.env` 访问环境变量
- **图标**: 项目使用 Element Plus Icons 和自定义 iconfont
- **浏览器兼容**: 支持现代浏览器，不支持 IE
- **Node 版本**: >=20.19.0
- **包管理器**: 使用 pnpm >=8.8.0

## 常用命令

```bash
pnpm dev              # 启动开发服务器
pnpm build            # 构建生产版本
pnpm lint             # 运行 ESLint 检查
pnpm fix              # 自动修复 ESLint 问题
pnpm lint:prettier    # 格式化代码
pnpm clean:dev        # 清理演示数据
pnpm commit           # 规范化提交
```
